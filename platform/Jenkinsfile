pipeline {
    agent any
    parameters {
        password(name: 'DB_PASSWORD', defaultValue: 'gh2387$$!s99', description: 'Please choose a DB password. It must meet Azure\'s complexity requirements.')
    }
    stages {
        stage('Provision') {
            steps {
                echo "Provisioning environment for ${env.BUILD_ID}..."
                script {
                    def registryUser
                    def registryPassword

                    docker.withServer('tcp://docker:2376', 'Docker-Certificate-Integration') {
                        docker.image('ncostello81/config-tools:0.1').inside("-u root --network=host") {
                            dir('platform') {
                                withCredentials([azureServicePrincipal('Azure-TestChallenge-SP')]) {
                                    sh 'terraform init';
                                    sh "terraform apply -auto-approve -var=\"az_sub_id=${AZURE_SUBSCRIPTION_ID}\" -var=\"az_client_id=${AZURE_CLIENT_ID}\" -var=\"az_client_secret=${AZURE_CLIENT_SECRET}\" -var=\"az_tenant_id=${AZURE_TENANT_ID}\" -var=\"obj_creator=ServianTestPipelines\" -var \"psql_user=techchallengedbadmin\" -var \"psql_password=${params.DB_PASSWORD}\"";
                                    registryUser = sh(script: "terraform output container_registry_user", returnStdout: true).trim();
                                    registryPassword = sh(script: "terraform output container_registry_password", returnStdout: true).trim();
                                }
                            } 
                        }
                    }

                    Credentials c = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, 'Container-Registry-Creds', '', registryUser, registryPassword)
                    SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), c)
                }
            }
        }
    }
}