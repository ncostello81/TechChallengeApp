jenkins:
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  remotingSecurity:
    enabled: true
  securityRealm:
    local:
      allowsSignup: false
      users:
      - id: "admin"
        name: "admin"
        password: "changeme"
credentials:
  system:
    domainCredentials:
      - credentials:
        - azure:
            id: Azure-TestChallenge-SP
            scope: GLOBAL
            azureEnvironmentName: "Azure"
            subscriptionId: ${AZ_SP_SUBSCRIPTION_ID}
            clientId: ${AZ_SP_CLIENT_ID}
            clientSecret: ${AZ_SP_CLIENT_SECRET}
            tenant: ${AZ_SP_TENANT_ID}
groovy:
  - script: >
      import com.cloudbees.plugins.credentials.*;
      import com.cloudbees.plugins.credentials.common.*;
      import com.cloudbees.plugins.credentials.domains.*;
      import com.cloudbees.plugins.credentials.impl.*;
      import org.jenkinsci.plugins.docker.commons.credentials.*;
      import jenkins.model.*
      
      domain = Domain.global();
      parent = Jenkins.instance;
      store = parent.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore();
      
      dockerCertCred = new DockerServerCredentials(
        CredentialsScope.GLOBAL,
        "Docker-Certificate-Integration",
        "",
        new File('/machines/docker/key.pem').text,
        new File('/machines/docker/cert.pem').text,
        new File('/machines/docker/ca.pem').text
      );

      store.addCredentials(domain, dockerCertCred);
jobs:
  - script: >
        multibranchPipelineJob('testchallenge-build') {
          branchSources {
            branchSource {
              source {
                git {
                  id('testchallenge-build-branches')
                  remote('https://github.com/ncostello81/TechChallengeApp.git')
                  traits {
                    gitBranchDiscovery()
                  }
                }
              }
              strategy {
                allBranchesSame {
                  props {
                    suppressAutomaticTriggering()
                  }
                }
              }
            }
          }
          factory {
            workflowBranchProjectFactory {
              scriptPath('Jenkinsfile')
            }
          }
        } 
  - script: >
        multibranchPipelineJob('testchallenge-deploy') {
          branchSources {
            branchSource {
              source {
                git {
                  id('testchallenge-deploy-branches')
                  remote('https://github.com/ncostello81/TechChallengeApp.git')
                  traits {
                    gitBranchDiscovery()
                  }
                }
              }
              strategy {
                allBranchesSame {
                  props {
                    suppressAutomaticTriggering()
                  }
                }
              }
            }
          }
          factory {
            workflowBranchProjectFactory {
              scriptPath('deploy/Jenkinsfile')
            }
          }
        }
  - script: >
        multibranchPipelineJob('testchallenge-platform') {
          branchSources {
            branchSource {
              source {
                git {
                  id('testchallenge-platform-branches')
                  remote('https://github.com/ncostello81/TechChallengeApp.git')
                  traits {
                    gitBranchDiscovery()
                  }
                }
              }
              strategy {
                allBranchesSame {
                  props {
                    suppressAutomaticTriggering()
                  }
                }
              }
            }
          }
          factory {
            workflowBranchProjectFactory {
              scriptPath('platform/Jenkinsfile')
            }
          }
        } 